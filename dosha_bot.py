import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram import F

API_TOKEN = "8252877532:AAGLvxowp2DpQo0sw4iyplcFKCk8dVrF-tQ"  # –≤—Å—Ç–∞–≤—å —Å–≤–æ–π —Ç–æ–∫–µ–Ω –æ—Ç BotFather

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(storage=MemoryStorage())


# ---- –°–æ—Å—Ç–æ—è–Ω–∏—è ----
class TestStates(StatesGroup):
    waiting_for_start = State()
    asking_question = State()


# ---- –í–æ–ø—Ä–æ—Å—ã ----
questions = [
    "–ö–∞–∫–æ–µ —É —Ç–µ–±—è —Ç–µ–ª–æ—Å–ª–æ–∂–µ–Ω–∏–µ?",
    "–ö–∞–∫–∞—è —É —Ç–µ–±—è –∫–æ–∂–∞?",
    "–ö–∞–∫ —Ç—ã –ø–µ—Ä–µ–Ω–æ—Å–∏—à—å —Ö–æ–ª–æ–¥?",
    "–ö–∞–∫ —Ç—ã –ø–µ—Ä–µ–Ω–æ—Å–∏—à—å –∂–∞—Ä—É?",
    "–ö–∞–∫ —É —Ç–µ–±—è —Å –∞–ø–ø–µ—Ç–∏—Ç–æ–º?",
    "–ö–∞–∫–∞—è —É —Ç–µ–±—è –ø–æ—Ö–æ–¥–∫–∞?",
    "–ö–∞–∫–æ–π —É —Ç–µ–±—è —Å–æ–Ω?",
    "–ö–∞–∫ —Ç—ã –æ–±—ã—á–Ω–æ —Ä–µ–∞–≥–∏—Ä—É–µ—à—å –Ω–∞ —Å—Ç—Ä–µ—Å—Å?",
    "–ù–∞—Å–∫–æ–ª—å–∫–æ –±—ã—Å—Ç—Ä–æ —Ç—ã —É—Å—Ç–∞–µ—à—å?",
    "–ö–∞–∫–æ–π —É —Ç–µ–±—è –≥–æ–ª–æ—Å?",
    "–ö–∞–∫ –±—ã—Å—Ç—Ä–æ —Ç—ã –≥–æ–≤–æ—Ä–∏—à—å?",
    "–¢—ã —Å–∫–ª–æ–Ω–µ–Ω –∫ –ø–æ–ª–Ω–æ—Ç–µ?",
    "–¢—ã —Å–∫–ª–æ–Ω–µ–Ω –∫ —Ö—É–¥–æ–±–µ?",
    "–¢—ã –±—ã—Å—Ç—Ä–æ –∑–∞–ø–æ–º–∏–Ω–∞–µ—à—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é?",
    "–¢—ã –Ω–∞–¥–æ–ª–≥–æ –∑–∞–ø–æ–º–∏–Ω–∞–µ—à—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é?",
    "–ö–∞–∫ —Ç—ã –æ–±—ã—á–Ω–æ –ø—Ä–æ—è–≤–ª—è–µ—à—å —ç–º–æ—Ü–∏–∏?",
    "–ù–∞—Å–∫–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–µ–Ω —Ç–≤–æ–π —É–º?",
    "–¢—ã –±–æ–ª—å—à–µ –ª—é–±–∏—à—å —Å–ª–∞–¥–∫–æ–µ –∏–ª–∏ —Å–æ–ª—ë–Ω–æ–µ?",
    "–ö–∞–∫ —É —Ç–µ–±—è —Å –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å—é?",
    "–ù–∞—Å–∫–æ–ª—å–∫–æ —Ç–µ–±–µ —Å–≤–æ–π—Å—Ç–≤–µ–Ω–µ–Ω –ø–µ—Ä—Ñ–µ–∫—Ü–∏–æ–Ω–∏–∑–º?",
    "–ö–∞–∫ —á–∞—Å—Ç–æ —É —Ç–µ–±—è –±—ã–≤–∞–µ—Ç —Ä–∞–∑–¥—Ä–∞–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å?",
    "–¢—ã –ª—é–±–∏—à—å —Ñ–∏–∑–∏—á–µ—Å–∫—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å?",
    "–ö–∞–∫–æ–π —É —Ç–µ–±—è —É—Ä–æ–≤–µ–Ω—å —ç–Ω–µ—Ä–≥–∏–∏ —É—Ç—Ä–æ–º?",
    "–ö–∞–∫–æ–π —É —Ç–µ–±—è —É—Ä–æ–≤–µ–Ω—å —ç–Ω–µ—Ä–≥–∏–∏ –≤–µ—á–µ—Ä–æ–º?"
]

# –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
answer_options = [
    ["–•—É–¥–æ—â–∞–≤–æ–µ", "–°—Ä–µ–¥–Ω–µ–µ", "–ö—Ä—É–ø–Ω–æ–µ"],
    ["–°—É—Ö–∞—è", "–ù–æ—Ä–º–∞–ª—å–Ω–∞—è", "–ñ–∏—Ä–Ω–∞—è"],
    ["–ü–ª–æ—Ö–æ", "–ù–æ—Ä–º–∞–ª—å–Ω–æ", "–•–æ—Ä–æ—à–æ"],
    ["–ü–ª–æ—Ö–æ", "–ù–æ—Ä–º–∞–ª—å–Ω–æ", "–•–æ—Ä–æ—à–æ"],
    ["–ü–ª–æ—Ö–æ–π", "–°—Ä–µ–¥–Ω–∏–π", "–û—á–µ–Ω—å —Ö–æ—Ä–æ—à–∏–π"],
    ["–õ—ë–≥–∫–∞—è", "–û–±—ã—á–Ω–∞—è", "–¢—è–∂—ë–ª–∞—è"],
    ["–õ—ë–≥–∫–∏–π", "–°—Ä–µ–¥–Ω–∏–π", "–ì–ª—É–±–æ–∫–∏–π"],
    ["–¢—Ä–µ–≤–æ–≥–∞", "–ì–Ω–µ–≤", "–°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ"],
    ["–ë—ã—Å—Ç—Ä–æ", "–°—Ä–µ–¥–Ω–µ", "–ú–µ–¥–ª–µ–Ω–Ω–æ"],
    ["–¢–æ–Ω–∫–∏–π", "–ù–æ—Ä–º–∞–ª—å–Ω—ã–π", "–ì—Ä–æ–º–∫–∏–π"],
    ["–ë—ã—Å—Ç—Ä–æ", "–°—Ä–µ–¥–Ω–µ", "–ú–µ–¥–ª–µ–Ω–Ω–æ"],
    ["–î–∞", "–ò–Ω–æ–≥–¥–∞", "–ù–µ—Ç"],
    ["–î–∞", "–ò–Ω–æ–≥–¥–∞", "–ù–µ—Ç"],
    ["–ë—ã—Å—Ç—Ä–æ", "–°—Ä–µ–¥–Ω–µ", "–ú–µ–¥–ª–µ–Ω–Ω–æ"],
    ["–ù–µ—Ç", "–°—Ä–µ–¥–Ω–µ", "–î–∞"],
    ["–Ø—Ä–∫–æ", "–£–º–µ—Ä–µ–Ω–Ω–æ", "–°–¥–µ—Ä–∂–∞–Ω–Ω–æ"],
    ["–û—á–µ–Ω—å –∞–∫—Ç–∏–≤–µ–Ω", "–£–º–µ—Ä–µ–Ω–Ω–æ", "–°–ø–æ–∫–æ–µ–Ω"],
    ["–°–ª–∞–¥–∫–æ–µ", "–ò —Ç–æ, –∏ –¥—Ä—É–≥–æ–µ", "–°–æ–ª—ë–Ω–æ–µ"],
    ["–ù–∏–∑–∫–∞—è", "–°—Ä–µ–¥–Ω—è—è", "–í—ã—Å–æ–∫–∞—è"],
    ["–û—á–µ–Ω—å", "–ò–Ω–æ–≥–¥–∞", "–ù–µ –æ—Å–æ–±–æ"],
    ["–†–µ–¥–∫–æ", "–ò–Ω–æ–≥–¥–∞", "–ß–∞—Å—Ç–æ"],
    ["–î–∞", "–ò–Ω–æ–≥–¥–∞", "–ù–µ—Ç"],
    ["–ù–∏–∑–∫–∏–π", "–°—Ä–µ–¥–Ω–∏–π", "–í—ã—Å–æ–∫–∏–π"],
    ["–ù–∏–∑–∫–∏–π", "–°—Ä–µ–¥–Ω–∏–π", "–í—ã—Å–æ–∫–∏–π"]
]


# ---- –ö–æ–º–∞–Ω–¥–∞ /start ----
@dp.message(Command("start"))
async def start_command(message: types.Message, state: FSMContext):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üöÄ –°—Ç–∞—Ä—Ç")]],
        resize_keyboard=True
    )
    await state.set_state(TestStates.waiting_for_start)
    await message.answer(
        "‚ú® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>DoshaBot</b>!\n\n"
        "–≠—Ç–æ—Ç —Ç–µ—Å—Ç –ø–æ–º–æ–∂–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–≤–æ—é <i>–¥–æ—à—É</i> ü™ê\n"
        "–ù–∞–∂–º–∏ <b>–°—Ç–∞—Ä—Ç</b>, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∫–æ—Å–º–∏—á–µ—Å–∫–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ.",
        reply_markup=keyboard,
        parse_mode="HTML"
    )


# ---- –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞ ----
@dp.message(F.text == "üöÄ –°—Ç–∞—Ä—Ç", TestStates.waiting_for_start)
async def start_test(message: types.Message, state: FSMContext):
    await state.update_data(current_q=0, answers=[])
    await state.set_state(TestStates.asking_question)
    await ask_question(message, state)


async def ask_question(message: types.Message, state: FSMContext):
    data = await state.get_data()
    q_index = data["current_q"]

    if q_index < len(questions):
        keyboard = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text=opt) for opt in answer_options[q_index]]],
            resize_keyboard=True
        )
        await message.answer(f"‚ùì {questions[q_index]}", reply_markup=keyboard)
    else:
        await show_result(message, state)


# ---- –û—Ç–≤–µ—Ç—ã ----
@dp.message(TestStates.asking_question)
async def process_answer(message: types.Message, state: FSMContext):
    data = await state.get_data()
    q_index = data["current_q"]
    answers = data["answers"]

    answers.append(message.text)
    q_index += 1
    await state.update_data(current_q=q_index, answers=answers)

    if q_index < len(questions):
        await ask_question(message, state)
    else:
        await show_result(message, state)


# ---- –†–µ–∑—É–ª—å—Ç–∞—Ç ----
async def show_result(message: types.Message, state: FSMContext):
    data = await state.get_data()
    answers = data["answers"]

    # –ü—Ä–æ—Å—Ç–µ–π—à–∞—è –ª–æ–≥–∏–∫–∞: —Å—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
    vata = answers.count("–•—É–¥–æ—â–∞–≤–æ–µ") + answers.count("–°—É—Ö–∞—è") + answers.count("–ü–ª–æ—Ö–æ")
    pitta = answers.count("–°—Ä–µ–¥–Ω–µ–µ") + answers.count("–ù–æ—Ä–º–∞–ª—å–Ω–∞—è") + answers.count("–ì–Ω–µ–≤")
    kapha = answers.count("–ö—Ä—É–ø–Ω–æ–µ") + answers.count("–ñ–∏—Ä–Ω–∞—è") + answers.count("–°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ")

    if vata > pitta and vata > kapha:
        dosha = "üå¨Ô∏è –í–∞—Ç–∞"
        recommendations = (
            "‚ú® –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n"
            "- –ò–∑–±–µ–≥–∞–π —Ö–æ–ª–æ–¥–∞ –∏ —Å—É—Ö–æ—Å—Ç–∏\n"
            "- –ë–æ–ª—å—à–µ —Ç—ë–ø–ª–æ–π –∏ –ø–∏—Ç–∞—Ç–µ–ª—å–Ω–æ–π –ø–∏—â–∏\n"
            "- –†–µ–≥—É–ª—è—Ä–Ω—ã–π —Ä–µ–∂–∏–º —Å–Ω–∞\n"
            "- –ô–æ–≥–∞, –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∞–∫—Ç–∏–∫–∏"
        )
    elif pitta > vata and pitta > kapha:
        dosha = "üî• –ü–∏—Ç—Ç–∞"
        recommendations = (
            "‚ú® –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n"
            "- –ò–∑–±–µ–≥–∞–π –ø–µ—Ä–µ–≥—Ä–µ–≤–∞ –∏ —Å—Ç—Ä–µ—Å—Å–∞\n"
            "- –ë–æ–ª—å—à–µ –æ–≤–æ—â–µ–π –∏ –æ—Ö–ª–∞–∂–¥–∞—é—â–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤\n"
            "- –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –ø—Ä–æ–≥—É–ª–∫–∏ –Ω–∞ —Å–≤–µ–∂–µ–º –≤–æ–∑–¥—É—Ö–µ\n"
            "- –ü—Ä–∞–∫—Ç–∏–∫—É–π –º–µ–¥–∏—Ç–∞—Ü–∏—é"
        )
    else:
        dosha = "üíß –ö–∞–ø—Ö–∞"
        recommendations = (
            "‚ú® –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n"
            "- –ò–∑–±–µ–≥–∞–π –ø–µ—Ä–µ–µ–¥–∞–Ω–∏—è –∏ —Ç—è–∂—ë–ª–æ–π –ø–∏—â–∏\n"
            "- –ë–æ–ª—å—à–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –¥–≤–∏–∂–µ–Ω–∏—è\n"
            "- –õ—ë–≥–∫–∏–π —Ä–µ–∂–∏–º –ø–∏—Ç–∞–Ω–∏—è\n"
            "- –ö–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—ã–π –¥—É—à –∏ —Å–ø–æ—Ä—Ç"
        )

    await message.answer(
        f"üåå –¢–≤–æ–π –∫–æ—Å–º–∏—á–µ—Å–∫–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:\n\n"
        f"<b>{dosha}</b>\n\n"
        f"{recommendations}",
        parse_mode="HTML",
        reply_markup=types.ReplyKeyboardRemove()
    )

    await state.clear()


# ---- –ó–∞–ø—É—Å–∫ ----
if __name__ == "__main__":
    import asyncio
    asyncio.run(dp.start_polling(bot))
